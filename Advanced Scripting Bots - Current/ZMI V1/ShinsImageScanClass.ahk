;Image/pixel scanning class by Spawnova (5/15/22)
;https://github.com/Spawnova/ShinsImageScanClass
;
;General purpose class to scan image data for images and pixels, for ahk_L (not compatible with ahk V2)
;
;Image transparency is not handled in this class, if an image contains pixels that are not fully opaque they are simply ignored;
;which can be used to match images with portions that should be ignored by having those pixels be less than 0xFF000000
;
;I designed this class to be relatively user friendly but still maintain good performance
;I can't promise it will work for every setup, I can only confirm that it works for me on windows 10 (32 and 64 bit)
;
;All returned coordinate positions are dependant on the mode used, desktop uses screen space, client uses client space, otherwise window space

class ShinsImageScanClass {

	;title				:		ahk window title or other type of identifier, leave blank or set to 0 to scan the entire desktop
	;UseClientArea		:		If a window is specified it will use the client area (generally does not include title bar and menus)
	;							Otherwise it will include the entirety of the window, which also includes extra space on the sides
	;							and bottom used for mouse dragging
	__New(title:=0, UseClientArea:=1) {
	
		this.AutoUpdate 		:= 1 	;when disabled, requires you to call Update() manually to refresh pixel data, useful when you need to scan multiple things on 1 frame
		
		this.UseControlClick 	:= 0  	;when enabled attempts to use ControlClick to send clicks which works for background programs
										;not all programs will respond to this however, so it may be necessary to use normal clicks which have to be foreground
		
		
		;#############################
		;	Setup internal stuff
		;#############################
		if (!DllCall("GetModuleHandle", "str", "gdiplus", "Ptr"))
			DllCall("LoadLibrary", "str", "gdiplus")
		VarSetCapacity(gsi, 24, 0)
		NumPut(1,gsi,0,"uint")
		DllCall("gdiplus\GdiplusStartup", "Ptr*", token, "Ptr", &gsi, "Ptr", 0)
		this.gdiplusToken := token
		
		this.bits := (a_ptrsize == 8) ;0=32,1=64
		this.desktop := (title = 0 or title = "")
		this.UseClientArea := UseClientArea
		this.imageCache := []
		
		if (this.desktop)
			coordmode,mouse,screen
		else if (UseClientArea)
			coordmode,mouse,client
		else
			coordmode,mouse,window

		this._ScanImage := this.mcode("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")
		this._ScanImageRegion := this.mcode("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")
		this._ScanImageCount := this.mcode("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")
		this._ScanImageCountRegion := this.mcode("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")
		this._ScanImageArray := this.mcode("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")
		this._ScanImageArrayRegion := this.mcode("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")
		this._ScanPixel := this.mcode("VVdWU4PsHIt0JDCLXCQwi1QkOItMJDQPt34KD7dbCIl8JBCE0g+ExQAAAIX/D4StAAAAD7bCicrHRCQYAAAAAMHqEIlEJAgPtsEPtvLHRCQUAAAAAIk0JA+29Yl0JASJRCQMhdt0YotEJDCLdCQYiwCNLLAxwItMhQCJysH6EA+28is0JInywfofMdYp1g+21StUJAQPtsmJ18H/HzH6Kfo51g9M8itMJAyJz8H/HzH5Kfk5zg9NzjtMJAgPjp4AAACDwAE5w3Wtg0QkFAGLRCQUAVwkGDlEJBB1h410JgC4/////+tSifaNvCcAAAAAi0QkEIXAdOiNBJ0AAAAAMe0x/4kEJIXbdD6LVCQwMcCLMgHu6xGNdgCNvCcAAAAAg8ABOcN0IYsUhoHi////ADnKdezB4BAB+IPEHFteX13DjbQmAAAAAIPHAQMsJDl8JBB1suuKjXYAjbwnAAAAAMHgEANEJBSDxBxbXl9dw5A=|QVdBVkFVQVRVV1ZTSIPsGEQPt1kQRA+3YRJBD7b4RYTAD4S5AAAARYXkD4SoAAAAidXHRCQMAAAAAA+2xkUx/8HtEEGJxkQPtspAD7btRYXbdG9IY0QkDEiLETHbTI0sgkGLVJ0AQYnaidDB+BAPtsAp6EGJwEHB+B9EMcBEKcBBicAPtsYPttJEKfCJxsH+HzHwKfBBOcBBD03ARCnKQYnQQcH4H0QxwkQpwjnQD0zCOfgPjpcAAABIg8MBQTnbf59Bg8cBRAFcJAxFOfwPhXr///8PH0AAuP/////rQ5BFheR08zHbRTH/RYXbdElMiwFIY8NNjRSARTHA6wtmkEmDwAFFOcN+L0eLDIJEicBBgeH///8AQTnRdeTB4BBEAfhIg8QYW15fXUFcQV1BXkFfww8fRAAAQYPHAUQB20U5/HWm65JmLg8fhAAAAAAAQcHiEEONBDrryJCQkJCQkA==")
		this._ScanPixelRegion := this.mcode("VVdWU4PsHIt0JDwDdCREi1wkOItMJDSJNCSLdCQ4i0QkSANcJECF9g+IkwEAAItUJDyF0g+IhwEAAItsJDAPt20IjVX/Od2JbCQUD07ai1QkMA+3Ugo7FCSNcv8PTzQkiTQkhMAPhNUAAAA7dCQ8D467AAAAiccPr2wkPInIwegQD7bAiUQkBA+2xYlEJAiJ+A+2wIlsJBiJRCQMD7bBiUQkEDtcJDh+ZYtEJDCLdCQYiwCNLLCLdCQ4i1S1AInRwfkQD7bJK0wkBInIwfgfMcEpwQ+2xitEJAgPttKJx8H/HzH4Kfg5wQ9MyCtUJBCJ18H/HzH6Kfo50Q9N0TtUJAwPjqkAAACDxgE583Wsi3QkFINEJDwBAXQkGIsEJDtEJDwPhXv///+QjbQmAAAAALj/////61SJ9o28JwAAAAA7dCQ8fuqJ74tsJDzB5wIPr+87XCQ4fkCLVCQwi0QkOIsyAe7rEY12AI28JwAAAACDwAE5w3QhixSGgeL///8AOcp17MHgEANEJDyDxBxbXl9dw5CNdCYAg0QkPAGLBCQB/TtEJDx1quuGjbYAAAAAi0QkPMHmEIPEHFsB8F5fXcO4/f///+vDkJCQkJCQkJA=|QVdBVkFVQVRVV1ZTSIPsGIuEJJAAAABEi5wkgAAAAIu8JIgAAABED7bgRQHDRAHPRYXAD4hxAQAARYXJD4hoAQAAD7dpEESNVf9EOd1FD07aRA+3URJBjVr/QTn6D077hMAPhMgAAABEOc8PjrcAAABEichBidUPtvKJfCQID6/FQcHtEIlsJAyJ9UUPtu2JRCQED7bGicdFOcN+b0hjRCQESIsRSWPYTI08gkGLFJ9Bid6J0MH4EA+2wEQp6EGJwkHB+h9EMdBEKdBBicIPtsYPttIp+InGwf4fMfAp8EE5wkEPTcIp6kGJ0kHB+h9EMdJEKdI50A9MwkQ54A+OnQAAAEiDwwFBOdt/oIt0JAxBg8EBAXQkBEQ5TCQID4V1////Dx9EAAC4/////+tBkEQ5z37zRYnMRA+v5UU5w35HSIsZSWPETWPQSI00g+sJSYPCAUU5034vQosclkSJ0IHj////ADnTdebB4BBEAchIg8QYW15fXUFcQV1BXkFfww8fgAAAAABBg8EBQQHsRDnPdajrkmYuDx+EAAAAAABBweYQQ40EDuvGuP3////rv5CQkJCQkJCQkJCQkJCQkA==")
		this._ScanPixelCount := this.mcode("VVdWU4PsJIt0JDiLVCRAi0wkPA+3XggPt3YKiVwkEIl0JBiE0g+E5QAAAIX2D4RNAQAAD7bCicqNNJ0AAAAAx0QkHAAAAACJRCQIweoQD7bBiXQkIA+28sdEJBQAAAAAiUQkDIl0JAQPtvWJNCQx9otMJBCFyXRyi0QkOItcJByLTCQgiwCNFJ0AAAAAjSwIjRwQAdWNdgCLEw+2zisMJInQD7bSic/B+BDB/x8PtsArRCQEMfkp+YnHwf8fMfgp+DnBD0zIK1QkDInXwf8fMfop+jnRD03RMcA7VCQID57Ag8MEAcY53XWug0QkFAGLTCQQi0QkFAFMJBw5RCQYD4Vr////g8QkifBbXl9dw5CLVCQYhdJ0aInYMe0x/zH2weACiQQkjXYAjbwnAAAAAItEJBCFwHQxi0QkOI0crQAAAACLEI0EGgMUJAHTjXYAixCB4v///wA50Q+UwoPABA+20gHWOcN154PHAQNsJBA5fCQYdbqDxCSJ8FteX13Dg8QkMfZbifBeX13DkJCQkA==|QVdBVkFVQVRVV1ZTSIPsGA+3QRJED7dhEIlEJARJic1BD7bwRYTAD4TjAAAAhcAPhCoCAABBjUQk/4nXD7buRTH/SIlEJAjB7xBFMfZFMdtAD7b/D7bKZg8fhAAAAAAARYXkdHxJi1UASWPHTI0MgkgDRCQISI1cggRmDx9EAABBixEPtsYp6EGJwEHB+B9EMcBEKcBBicCJ0A+20sH4EA+2wCn4QYnCQcH6H0Qx0EQp0EE5wEEPTcApykGJ0EHB+B9EMcJEKcI50A9MwjnwD57ASYPBBA+2wEEBw0w5y3WfQYPGAUUB50Q5dCQED4Vt////RInYSIPEGFteX11BXEFdQV5BX8NmDx+EAAAAAACJx4XAD4RFAQAARInjRYniZg9u4jHJwesCQY10JP9Bg+L8RTHJZg9vFQAAAABIweMERTHbZg9w3AAPH4AAAAAARYXkD4TqAAAATYtFAIP+Aw+G8gAAAEhjwWYP78lJjQSASI0sAw8fAPMPbwBIg8AQZg/bwmYPdsNmD/rISDnFdedmD2/BZg9z2AhmD/7IZg9vwWYPc9gEZg/+yGYPfshBAcNEidBFOdQPhIUAAACNLAFIY+1BiyyogeX///8AOdVAD5TFQA+27UEB641oAUE57H5gAc1IY+1BiyyogeX///8AOepAD5TFQA+27UEB641oAkE57H48Ac1IY+1BiyyogeX///8AOdVAD5TFg8ADQA+27UEB60Q54H0YAchImEGLBIAl////ADnQD5TAD7bAQQHDQYPBAUQB4UQ5zw+F/f7//+mb/v//McDpX////0Ux2+mM/v//kJCQkJCQkJCQ////AP///wD///8A////AA==")
		this._ScanPixelCountRegion := this.mcode("VVdWU4PsKIt0JESLXCREi2wkSItEJECLVCRUA1wkTANsJFCF9g+IyQEAAItMJEiFyQ+IvQEAAIt0JDwPt3YIOd6NTv+JdCQYD0/Li1wkPIlMJBAPt0sKjVn/OekPT92JXCQUhNIPhPUAAAA7XCRID45zAQAAD690JEiLTCQQideJwsHqEIn7D7bbiXQkHIt0JESJXCQIweYCiXQkII00jQAAAACJdCQkD7byiXQkBA+29A+2wIlEJAyJNCQx9maQi0QkEDtEJER+cItEJDyLXCQgiyiLRCQcweACAcMB6wNsJCQBxY12AIsTD7bOKwwkidAPttKJz8H4EMH/Hw+2wCtEJAQx+Sn5icfB/x8x+Cn4OcEPTMgrVCQMidfB/x8x+in6OdEPTdExwDtUJAgPnsCDwwQBxjndda6LXCQYg0QkSAEBXCQci0QkFDtEJEgPhWv///+DxCiJ8FteX13DkDtcJEgPjn4AAACLdCREi3wkGA+vfCRIi2wkSMHmAok0JIt0JBDB5gKJdCQEMfZmkItcJBA7XCREfjeLXCQ8ixQkiwuNHL0AAAAAAdoBygNMJAQBy410JgCLCoHh////ADnID5TBg8IED7bJAc4503Xng8UBA3wkGDlsJBR1soPEKInwW15fXcODxCgx9luJ8F5fXcO+/f///+lX////kJA=|QVdBVkFVQVRVV1ZTSIPsKIuEJKAAAABEi7QkkAAAAIucJJgAAAAPtvBEiYQkgAAAAEmJzUUBxkQBy0WFwA+IvgIAAEWFyQ+ItQIAAA+3eRCNT/9EOfeJfCQERA9O8UEPt00SRI1B/znZRA9Pw0SJBCSEwA+FlwEAAEQ5DCQPjnYCAABBifhEifcrvCSAAAAAi5wkgAAAAIn4QYn/jXf/Zg9vFQAAAADB6AJBg+f8Zg9u4ol0JAhIweAERQ+vwWYPcNwARAH7SIlEJBBIY4QkgAAAAIP+Aw9GnCSAAAAARTHkSIlEJBhEjVsBjXMCjWsDRDu0JIAAAAAPjuEAAACDfCQIA02LVQB2XkiLTCQQSWPASANEJBhmD+/JSY0EgkgBwQ8fgAAAAADzD28ASIPAEGYP28JmD3bDZg/6yEg5yHXnZg9vwWYPc9gIZg/+yGYPb8FmD3PYBGYP/shmD37IQQHERDn/dHhBjQQYSJhBiwSCJf///wA50A+UwA+2wEEBxEU53n5ZQ40EGEiYQYsEgiX///8AOcIPlMAPtsBBAcRBOfZ+OkGNBDBImEGLBIIl////ADnQD5TAD7bAQQHERDn1fRtCjUQFAEiYQYsEgiX///8AOdAPlMAPtsBBAcRBg8EBRANEJAREOQwkD4X+/v//RIngSIPEKFteX11BXEFdQV5BX8NmLg8fhAAAAAAARTnID47gAAAAi4QkgAAAAA+27kUx5A+2ykEPr/lIY5wkgAAAAPfQRAHwSIlcJAhIAdhBif+J10iJRCQQwe8QQA+2/w8fRAAARDu0JIAAAAB+f0iLXCQISYtVAEljx0yNBBhIA0QkEE6NFIJIjVyCBEGLEg+2xinoQYnAQcH4H0QxwEQpwEGJwInQD7bSwfgQD7bAKfhBicNBwfsfRDHYRCnYQTnAQQ9NwCnKQYnQQcH4H0QxwkQpwjnQD0zCOfAPnsBJg8IED7bAQQHETDnTdZ9Bg8EBRAN8JAREOQwkD4Vk////6fn+//9FMeTp8f7//0G8/f///+nm/v//kJCQkP///wD///8A////AP///wA=")
		this._ScanPixelCountRadius := this.mcode("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")
		this._ScanPixelPosition := this.mcode("VVdWU4tUJBSLdCQci0wkGA+3QgiLfCQgi1wkJDnwD4aMAAAAD7dqCjn9D4aAAAAAD6/HixIB8L4BAAAAixSCidAl////ADnIdFkx9oTbdFOJzw+264nGD7bSwe8Qwf4QD7bEifsPtvsp/on3wf8fMf4p/g+2+Q+2zSn6idfB/x8x+in6OdYPTdYpyInBwfkfMcgpyDnCD03COcUPncAPtsCJxluJ8F5fXcONtgAAAAC+/v///+vskJCQkJCQkJCQ|D7dBEESLVCQoRDnAD4aeAAAARA+3WRJFOcsPhpAAAABED6/ISIsBRQHIQosMgEG4AQAAAInIJf///wA50HRoRTHARYTSdGBFD7bKQYnSQYnAD7bJQcHqEEHB+BAPtsRFD7bSRSnQRYnCQcH6H0Ux0EUp0EQPttIPttZEKdFBicpBwfofRDHRRCnRQTnIQQ9NyCnQmTHQKdA5wQ9MyEUxwEE5yUEPncBEicDDDx9EAABBuP7////r75CQkJCQkJCQ")
		
		this.tBufferPtr := tBufferPtr := this.SetVarCapacity("ttBuffer",4096,0)
		this.dataPtr := dataPtr := this.SetVarCapacity("_data",64,0)

		if (!this.desktop and !this.hwnd := winexist(title)) {
			msgbox % "Could not find window: " title "!`n`nScanner will not function!"
			return
		}
		if (!this.GetRect(gw,gh))
			return
		
		this.width := gw
		this.height := gh
		this.srcDC := DllCall("GetDCEx", "Ptr", (this.desktop ? 0 : this.hwnd),"Uint",0,"Uint",(this.UseClientArea ? 0 : 1))
		this.dstDC := DllCall("CreateCompatibleDC", "Ptr", 0)
		NumPut(tBufferPtr,dataPtr+0,(this.bits ? 8 : 4),"Ptr")
		this.CreateDIB()
	}
	
	
	;####################################################################################################################################################################################################################################
	;Image
	;
	;image				:				Path to image file
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;
	;return				;				Returns 1 if the image was found; 0 otherwise
	
	Image(image,variance=0,ByRef returnX=0,ByRef returnY=0) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		data := DllCall(this._ScanImage,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uchar",variance,"int")
		if (data > 0) {
			returnX := data >> 16
			returnY := data & 0xFFFF
			return 1
		}
		return 0
	}
	
	
	;####################################################################################################################################################################################################################################
	;ImageRegion
	;
	;image				:				Path to image file
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w					:				Width of pixels to search, starting from x1
	;h					:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;
	;return				;				Returns 1 if the image was found in the specified region; 0 otherwise
	
	ImageRegion(image,x1,y1,w,h,variance=0,ByRef returnX=0,ByRef returnY=0) {
		if (!this.CacheImage(image))
			return 0
		this.CheckRegion(x1,y1,w,h)
		if (this.AutoUpdate)
			this.Update()
		data := DllCall(this._ScanImageRegion,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uint",x1,"uint",y1,"uint",w,"uint",h,"uchar",variance,"int")
		if (data > 0) {
			returnX := data >> 16
			returnY := data & 0xFFFF
			return 1
		}
		return 0
	}
	
	
	;####################################################################################################################################################################################################################################
	;ImageCount
	;
	;image				:				Path to image file
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of images found; 0 otherwise
	
	ImageCount(image,variance=0) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanImageCount,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}
	
	
	;####################################################################################################################################################################################################################################
	;ImageCountRegion
	;
	;image				:				Path to image file
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w					:				Width of pixels to search, starting from x1
	;h					:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of images found in the specified region; 0 otherwise
	
	ImageCountRegion(image,x1,y1,w,h,variance=0) {
		if (!this.CacheImage(image))
			return 0
		this.CheckRegion(x1,y1,w,h)
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanImageCountRegion,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uint",x1,"uint",y1,"uint",w,"uint",h,"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}


	;####################################################################################################################################################################################################################################
	;ImageClosestToPoint
	;
	;image				:				Path to image file
	;pointX				:				x position of the point
	;pointY				:				y position of the point
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;centerResults		:				Value between 0-1, if enabled the positions returned will be centered as oposed to top left of the target image
	;									This also affects distance calculations for closest image
	;MaxRadius			:				Maximum circular radius to search in; lower values require images to be closer to the point
	;
	;return				;				Returns 1 if an image was found close enough to the point; 0 otherwise
	
	ImageClosestToPoint(image,pointX,pointY,variance=0,byref returnX=0,byref returnY=0,centerResults=1,maxRadius=9999) {
		if (!c := this.ImageArray(image,a,variance,centerResults))
			return 0
		min := maxRadius
		i := 0
		loop % c {
			xd := a[a_index].x - pointX
			yd := a[a_index].y - pointY
			dist := sqrt(xd*xd + yd*yd)
			if (dist < min) {
				min := dist
				i := a_index
			}
		}
		if (i = 0)
			return 0
		returnX := a[i].x
		returnY := a[i].y
		return 1
	}
	
	
	;####################################################################################################################################################################################################################################
	;ImageArray
	;
	;image				:				Path to image file
	;&array				:				An array which will hold all the image locations (first element would be array[1].x and array[1].y)
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;centerResults		:				Value between 0-1, if enabled the positions returned will be centered as oposed to top left of the target image
	;
	;return				;				Returns 1 (and updates &array) if any number of images were found; 0 otherwise
	
	ImageArray(image,byref array,variance=0,centerResults=1) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		count := DllCall(this._ScanImageArray,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uchar",variance,"uchar",centerResults,"int")
		if (count > 0) {
			array := []
			loop % count {
				v := NumGet(this.tBufferPtr,(a_index-1)*4,"uint")
				array.push({x:v>>16,y:v&0xFFFF})
			}
			return count
		}
		return 0
	}
	
	
	;####################################################################################################################################################################################################################################
	;ImageArrayRegion
	;
	;image				:				Path to image file
	;&array				:				An array which will hold all the image locations (first element would be array[1].x and array[1].y)
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w					:				Width of pixels to search, starting from x1
	;h					:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;centerResults		:				Value between 0-1, if enabled the positions returned will be centered as oposed to top left of the target image
	;
	;return				;				Returns 1 (and updates &array) if any number of images were found in the specified region; 0 otherwise
	
	ImageArrayRegion(image,byref array,x1,y1,w,h,variance=0,centerResults=1) {
		if (!this.CacheImage(image))
			return 0
		this.CheckRegion(x1,y1,w,h)
		if (this.AutoUpdate)
			this.Update()
		count := DllCall(this._ScanImageArrayRegion,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uchar",variance,"uchar",centerResults,"int")
		if (count > 0) {
			array := []
			loop % count {
				v := NumGet(this.tBufferPtr,(a_index-1)*4,"uint")
				array.push({x:v>>16,y:v&0xFFFF})
			}
			return count
		}
		return 0
	}
	
	
	;####################################################################################################################################################################################################################################
	;Pixel
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;
	;return				;				Returns 1 if pixel was found; 0 otherwise
	
	Pixel(color,variance=0,ByRef returnX=0,ByRef returnY=0) {
		color &= 0xFFFFFF
		if (this.AutoUpdate)
			this.Update()
		data := DllCall(this._ScanPixel,"Ptr",this.dataPtr,"Uint",color,"uchar",variance,"int")
		if (data > 0) {
			returnX := data >> 16
			returnY := data & 0xFFFF
			return 1
		}
		return 0
	}
	
	
	;####################################################################################################################################################################################################################################
	;PixelRegion
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w					:				Width of pixels to search, starting from x1
	;h					:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;
	;return				;				Returns 1 if a pixel inside the specified region was found; 0 otherwise
	
	PixelRegion(color,x1,y1,w,h,variance=0,byref returnX=0,byref returnY=0) {
		this.CheckRegion(x1,y1,w,h)
		color &= 0xFFFFFF
		if (this.AutoUpdate)
			this.Update()
		data := DllCall(this._ScanPixelRegion,"Ptr",this.dataPtr,"Uint",color,"uint",x1,"uint",y1,"uint",w,"uint",h,"uchar",variance,"int")
		if (data > 0) {
			returnX := data >> 16
			returnY := data & 0xFFFF
			return 1
		}
		return 0
	}
	
	
	;####################################################################################################################################################################################################################################
	;PixelPosition
	;
	;color				:				Color of pixel to match at a given position(can be in 0xRRGGBB or 0xFFRRGGBB format)
	;pointX				:				X position
	;pointY				:				Y position
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns 1 if the color matched at the specified position; 0 otherwise
	
	PixelPosition(color,pointX,pointY,variance=0) {
		color &= 0xFFFFFF
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanPixelPosition,"Ptr",this.dataPtr,"Uint",color,"uint",pointX,"uint",pointY,"uint",variance,"int")
		return (c == 1 ? 1 : 0)
	}
	
	
	;####################################################################################################################################################################################################################################
	;PixelCount
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of matching pixels; 0 otherwise
	
	PixelCount(color,variance=0) {
		color &= 0xFFFFFF
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanPixelCount,"Ptr",this.dataPtr,"Uint",color,"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}
	
	
	;####################################################################################################################################################################################################################################
	;PixelCountRegion
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w					:				Width of pixels to search, starting from x1
	;h					:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of matching pixels in the specified region; 0 otherwise
	
	PixelCountRegion(color,x1,y1,w,h,variance=0) {
		this.CheckRegion(x1,y1,w,h)
		color &= 0xFFFFFF
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanPixelCountRegion,"Ptr",this.dataPtr,"Uint",color,"uint",x1,"uint",y1,"uint",w,"uint",h,"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}
	
	
	
	;####################################################################################################################################################################################################################################
	;PixelCountRadius
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;pointX				:				X position
	;pointY				:				Y position
	;radius				:				Radius to search in
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of matching pixels in a specified radius; 0 otherwise
	
	PixelCountRadius(color,pointX,pointY,radius,variance=0) {
		color &= 0xFFFFFF
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanPixelCountRadius,"Ptr",this.dataPtr,"Uint",color,"uint",pointX,"uint",pointY,"uint",radius,"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}
	
	
	;####################################################################################################################################################################################################################################
	;GetPixel
	;
	;pointX				:				X position
	;pointY				:				Y position
	;
	;return				;				Returns the pixel at the pointX,pointY location
	
	GetPixel(pointX,pointY) {
		if (this.AutoUpdate)
			this.Update()
		if (pointX < 0 or pointY < 0 or pointX >= this.width or pointY >= this.height) {
			msgbox % "Cannot get a pixel at position: " pointX "," pointY " as it lies outside of the source region!"
			return 0
		}
		return NumGet(this.temp0,(pointX+pointY*this.width)*4,"uint")
	}
	
	
	;####################################################################################################################################################################################################################################
	;SaveImage
	;
	;name				:				Name to save to file to
	;
	;return				;				Saves the current pixel buffer to a png image
	
	SaveImage(name) {
		if (!InStr(name,".png"))
			name .= ".png"
		if (this.autoUpdate)
			this.Update()
		DllCall("gdiplus\GdipCreateBitmapFromHBITMAP", "Ptr", this.hbm, "Ptr", 0, "Ptr*", bm)
		
		;largely borrowed from tic function, encoder stuff is a pain
		DllCall("gdiplus\GdipGetImageEncodersSize", "uint*", nCount, "uint*", nSize)
		VarSetCapacity(ci, nSize)
		DllCall("gdiplus\GdipGetImageEncoders", "uint", nCount, "uint", nSize, "Ptr", &ci)
		if !(nCount && nSize) {
			msgbox % "Problem getting encoder information"
			return 0
		}
		Loop % nCount {
			sString := StrGet(NumGet(ci, (idx := (48+7*A_PtrSize)*(A_Index-1))+32+3*A_PtrSize), "UTF-16") ;Thanks tic, this particularily confused me!
			if (InStr(sString, "*.PNG")) {
				pCodec := &ci+idx
				break
			}
		}
		if (!pCodec) {
			msgbox % "Problem finding png codec"
			return 0
		}
		DllCall("gdiplus\GdipSaveImageToFile", "Ptr", bm, "Ptr", &name, "Ptr", pCodec, "uint", 0)
	}
	
	
	;####################################################################################################################################################################################################################################
	;Click
	;
	;pointX				:				X position to click
	;pointY				:				Y position to click
	;button				:				Type of click (left,right,middle)
	;
	;return				;				Returns 1 on success; 0 otherwise
	;
	;notes				:				ControlClick will not work for every application
	
	Click(pointX,pointY,button:="left") {
		if (this.UseControlClick) {
			t := "ahk_id " this.hwnd
			ControlClick, x%pointX% y%pointY%, %t%,,%button%,,NA
		} else {
			if (!WinActive("ahk_id " this.hwnd)) {
				msgbox % "Attempting to click in target window but it is not active!`n`nIf you want to click inactive windows set 'UseControlClick' to true after initializing the class"
				return 0
			}
			click,%pointX%,%pointY%,%button%
		}
		return 1
	}
	
	
	;####################################################################################################################################################################################################################################
	;ClickDrag
	;
	;pointX1			:				X position to start click
	;pointY1			:				Y position to start click
	;pointX2			:				X position to end click
	;pointY2			:				Y position to end click
	;button				:				Type of click (left,right,middle)
	;
	;return				;				Returns 1 on success; 0 otherwise
	;
	;notes				:				ControlClick will not work for every application
	
	ClickDrag(pointX1,pointY1,pointX2,pointY2,button:="left") {
		if (this.UseControlClick) {
			t := "ahk_id " this.hwnd
			ControlClick, x%pointX1% y%pointY1%, %t%,,%button%,,NA D
			sleep 10
			ControlClick, x%pointX2% y%pointY2%, %t%,,%button%,,NA U
		} else {
			if (!WinActive("ahk_id " this.hwnd)) {
				msgbox % "Attempting to click in target window but it is not active!`n`nIf you want to click inactive windows set 'UseControlClick' to true after initializing the class"
				return 0
			}
			MouseClickDrag,%button%,%pointX1%,%pointY1%,%pointX2%,%pointY2%
		}
		return 1
	}
	
	
	;####################################################################################################################################################################################################################################
	;ClickRegion
	;
	;pointX				:				X position to click
	;pointY				:				Y position to click
	;w					:				Width of region
	;h					:				Height of region
	;button				:				Type of click (left,right,middle)
	;
	;return				;				Returns 1 on success; 0 otherwise
	;
	;notes				:				Clicks randomly within the specified region
	
	ClickRegion(pointX,pointY,w,h,button:="left") {
		this.CheckRegion(pointX,pointY,w,h)
		pointX += this.Random(0,w)
		pointY += this.Random(0,h)
		return this.Click(pointX,pointY,button)
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	;########################################## 
	;  internal functions used by the class
	;########################################## 
	CheckRegion(byref x, byref y, byref w, byref h) {
		if (w < 0) {
			w := -w
			x -= w
		}
		if (h < 0) {
			h := -h
			y -= h
		}
	}
	CheckWindow() {
		if (this.desktop)
			return 1
		
		if (this.UseClientArea and !this.GetClientRect(w,h))
			return 0
		else if (!this.UseClientArea and !this.GetWindowRect(w,h))
			return 0
			
		if (w != this.width or h != this.height) {
			this.width := w
			this.height := h
			DllCall("DeleteObject","Ptr",this.hbm)
			this.CreateDIB()
		}
		return 1
	}
	CreateDIB() {
		VarSetCapacity(_scan,8)
		VarSetCapacity(bi,40,0)
		NumPut(this.width,bi,4,"int")
		NumPut(-this.height,bi,8,"int")
		NumPut(40,bi,0,"uint")
		NumPut(1,bi,12,"ushort")
		NumPut(32,bi,14,"ushort")
		this.hbm := DllCall("CreateDIBSection", "Ptr", this.dstDC, "Ptr", &bi, "uint", 0, "Ptr*", _scan, "Ptr", 0, "uint", 0, "Ptr")
		this.temp0 := _scan
		NumPut(_scan,this.dataPtr,0,"Ptr")
		NumPut((this.height<<16)+this.width,this.dataPtr,(this.bits ? 16 : 8),"uint")
		DllCall("SelectObject", "Ptr", this.dstDC, "Ptr", this.hbm)
	}
	SetVarCapacity(key,size,fill=0) {
		this.SetCapacity(key,size)
		DllCall("RtlFillMemory","Ptr",this.GetAddress(key),"Ptr",size,"uchar",fill)
		return this.GetAddress(key)
	}
	_Delete() {
		DllCall("gdiplus\GdiplusShutdown", "Ptr*", this.gdiplusToken)
	}
	CacheImage(image) {
		if (this.imageCache.haskey(image))
			return 1
		if (image = "") {
			msgbox % "Error, expected resource image path but empty variable was supplied!"
			return 0
		}
		if (!FileExist(image)) {
			msgbox % "Error finding resource image: '" image "' does not exist!"
			return 0
		}
		if (!A_IsUnicode) {
			VarSetCapacity(wchar, strlen(image)*2)
			DllCall("kernel32\MultiByteToWideChar", "uint", 0, "uint", 0, "Ptr", &image, "int", -1, "Ptr", &wchar, "int", strlen(image))
			DllCall("gdiplus\GdipCreateBitmapFromFile", "Ptr", &wchar, "Ptr*", bm)
		} else
			DllCall("gdiplus\GdipCreateBitmapFromFile", "Ptr", &image, "Ptr*", bm)
		DllCall("gdiplus\GdipGetImageWidth", "Ptr", bm, "Uint*", w)
		DllCall("gdiplus\GdipGetImageHeight", "Ptr", bm, "Uint*", h)
		VarSetCapacity(r,16)
		NumPut(x,r,0,"uint")
		NumPut(y,r,4,"uint")
		NumPut(w,r,8,"uint")
		NumPut(h,r,12,"uint")
		VarSetCapacity(bmdata, 32, 0)
		DllCall("Gdiplus\GdipBitmapLockBits", "Ptr", bm, "Ptr", &r, "uint", 3, "int", 0x26200A, "Ptr", &bmdata)
		scan := NumGet(bmdata, 16, "Ptr")
		p := DllCall("GlobalAlloc", "uint", 0x40, "ptr", 16+((w*h)*4), "ptr")
		NumPut((w<<16)+h,p+0,0,"uint")
		loop % ((w*h)*4)
			NumPut(NumGet(scan+0,a_index-1,"uchar"),p+0,a_index+7,"uchar")
		loop % (w*h)
			if (NumGet(scan+0,(a_index-1)*4,"uint") < 0xFF000000) {
				NumPut(1,p+4,"uint")
				break
			}
		DllCall("Gdiplus\GdipBitmapUnlockBits", "Ptr", bm, "Ptr", &bmdata)
		DllCall("gdiplus\GdipDisposeImage", "ptr", bm)
		this.ImageCache[image] := p
		return 1
	}
	Update() {
		if (this.CheckWindow())
			DllCall("gdi32\BitBlt", "Ptr", this.dstDC, "int", 0, "int", 0, "int", this.width, "int", this.height, "Ptr", this.srcDC, "int", 0, "int", 0, "uint", 0xCC0020)
	}
	GetRect(ByRef w, ByRef h) {
		if (this.desktop) {  ;only gets primary screen for now, I may add support for virtual later
			w := a_screenwidth
			h := a_screenheight
			return 1
		}
		if (this.UseClientArea) {
			if (!this.GetClientRect(w,h)) {
				msgbox % "Problem with Client rectangle dimensions, is window minimized?`n`nScanner will not function!"
				return 0
			}
		} else {
			if (!this.GetWindowRect(w,h)) {
				msgbox % "Problem with Window rectangle dimensions, is window minimized?`n`nScanner will not function!"
				return 0
			}
		}
		return 1
	}
	GetClientRect(byref w, byref h) {
		if (!DllCall("GetClientRect", "Ptr", this.hwnd, "Ptr", this.tBufferPtr))
			return 0
		w := NumGet(this.tBufferPtr,8,"int")
		h := NumGet(this.tBufferPtr,12,"int")
		if (w <= 0 or h <= 0)
			return 0
		return 1
	}
	GetWindowRect(byref w, byref h) {
		if (!DllCall("GetWindowRect", "Ptr", this.hwnd, "Ptr", this.tBufferPtr))
			return 0
		x := NumGet(this.tBufferPtr,0,"int")
		y := NumGet(this.tBufferPtr,4,"int")
		w := NumGet(this.tBufferPtr,8,"int") - x
		h := NumGet(this.tBufferPtr,12,"int") - y
		if (w <= 0 or h <= 0)
			return 0
		return 1
	}
	Random(min,max) {
		random,result,min,max
		return result
	}
	Mcode(str) {
		s := strsplit(str,"|")
		if (s.length() != 2)
			return
		if (!DllCall("crypt32\CryptStringToBinary", "str", s[this.bits+1], "uint", 0, "uint", 1, "ptr", 0, "uint*", pp, "ptr", 0, "ptr", 0))
			return
		p := DllCall("GlobalAlloc", "uint", 0, "ptr", pp, "ptr")
		if (this.bits)
			DllCall("VirtualProtect", "ptr", p, "ptr", pp, "uint", 0x40, "uint*", op)
		if (DllCall("crypt32\CryptStringToBinary", "str", s[this.bits+1], "uint", 0, "uint", 1, "ptr", p, "uint*", pp, "ptr", 0, "ptr", 0))
			return p
		DllCall("GlobalFree", "ptr", p)
	}
}
